": VIMRC
": Change: Wed Aug 30 10:56:54 AM CDT 2023

": :echo resolve(expand('%:p'))

fun WriteDate()
  normal! mpHmoggj
  :r!date
  normal! kdd
  execute "normal I\": Change:\<Space>\<Esc>"
  normal! 'ozt`p
endf

function GetLine()
  if line("'\"") > 1 && line("'\"") <= line("$") | exec "normal g'\"" | endif
endfunction

function Indent()
  normal! mp
  normal! =ap
  normal! `p
endfunction

function BufPreWrite()
  if &filetype == 'snippets'
    echom "one"
  else
    echom "two"
    normal! mpHmo

    if expand('%f') == '.vimrc'
      setlocal ts=2 sw=4

      normal! ggj
      :r!date
      normal! kdd
      execute "normal I\": Change:\<Space>\<Esc>"
    endif

    :%s/\s\+$//e
    normal! =ap
    normal! 'ozt`p
  endif
endfunction

filetype plugin on
filetype indent on
syntax on
set backspace=indent,eol,start
set background=dark
set t_Co=256
set termguicolors

" Put cursor here -> X <-

set tabstop=4
set shiftwidth=4
set expandtab
set nowrap
set number
set relativenumber

set autoindent
set autoread
set autochdir
set completeopt=menuone,preview,popup
set foldlevel=99
set foldlevelstart=99
set hidden
set ignorecase
set incsearch
set path+=**
set ruler
set scrolloff=5
set showcmd
set showmatch
set smartcase
set smartindent
set updatetime=333
set wildmenu
set wildmode=longest,list,full

set directory=~/.vim/backup
set backupdir=~/.vim/backup
set undodir=~/.vim/undodir
set nobackup
set undofile
set noswapfile
set writebackup

let mapleader=" "
let maplocalleader="\\"

call plug#begin()
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
" Plug 'garbas/vim-snipmate'
Plug 'tpope/vim-commentary'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'mbbill/undotree'
Plug 'yggdroot/indentline'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
call plug#end()

let g:coc_global_extensions = [
      \ 'coc-json', 'coc-tsserver', 'coc-snippets', 'coc-eslint', 'coc-sh',
      \ 'coc-rust-analyzer', 'coc-markdownlint', 'coc-jedi', 'coc-cmake',
      \ 'coc-clangd'
      \ ]

" use <tab> to trigger completion and navigate to the next complete item
" function! CheckBackspace() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" inoremap <silent><expr> <Tab>
"             \ coc#pum#visible() ? coc#pum#next(1) :
"             \ CheckBackspace() ? "\<Tab>" :
"             \ coc#refresh()

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ CheckBackSpace() ? "\<TAB>" :
      \ coc#refresh()

function! CheckBackSpace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"

" inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
" inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
" inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

nnoremap <leader>fz :FZF<cr>
nnoremap <leader>fh :FZF ~<CR>
nnoremap <leader>fb :Buffers<cr>
nnoremap <leader>fc :Colors<cr>
nnoremap <leader>fll :Lines<cr>
nnoremap <leader>flb :BLines<cr>
nnoremap <leader>ftt :Tags<cr>
nnoremap <leader>ftb :BTags<cr>
nnoremap <leader>fm :Marks<cr>
nnoremap <leader>fj :Jumps<cr>
nnoremap <leader>fp :Maps<cr>

nmap <leader>mf <Plug>(easymotion-bd-f)
nmap <leader>mf <Plug>(easymotion-overwin-f)
nmap <leader>ms <Plug>(easymotion-bd-s)
nmap <leader>ms <Plug>(easymotion-overwin-f2)
nmap <leader>ml <plug>(easymotion-bd-jk)
nmap <leader>ml <Plug>(easymotion-overwin-line)
nmap <leader>mw <Plug>(easymotion-bd-w)
nmap <leader>mw <Plug>(easymotion-overwin-w)

let g:undotree_SplitWidth=40
let g:undotree_ShortIndicators=1
let g:undotree_HighlightChangedText=0
nnoremap <leader>ut :UndotreeToggle<cr>

let g:indentLine_char = '▏'
" let g:indentLine_char_list = ['▏', '▏', '┊']
let g:indentLine_setColors = 0
let g:indentLine_defaultGroup = 'SpecialKey'
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2
" let g:indentLine_setConceal = 0

let g:netrw_banner=0
let g:netrw_altv=1
let g:netrw_liststyle=3
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\s\+'

let g:snipMate = { 'snippet_version': 1 }

colorscheme retrobox

inoremap kj <ESC>
vnoremap kj <ESC>

nnoremap <localleader>e :write<CR>:edit $MYVIMRC<CR>
nnoremap <localleader>ve :write<CR>:vsplit<CR><C-w>l:edit $MYVIMRC<CR>

nnoremap <leader>w :write<CR>
nnoremap <localleader>w :wall<CR>
nnoremap <leader>z :write<CR>:quit<CR>
nnoremap <localleader>z :xall<CR>
nnoremap <leader>q :quit!<CR>
nnoremap <leader>o :edit .<CR>
nnoremap <leader>t :term<CR>

nnoremap <C-f> <C-d>
nnoremap [a zt
nnoremap E $
nnoremap Y y$
nnoremap B _
nnoremap w W
nnoremap n nzz
nnoremap N Nzz
nnoremap ' `
nnoremap '' ``
vnoremap J :m '>+1<cr>gv=gv
vnoremap K :m '<-2<cr>gv=gv
vnoremap < <gv
vnoremap > >gv
nnoremap ]b :bnext<cr>
nnoremap [b :bprev<cr>

nnoremap <leader>v :vsplit<cr><C-w>l
nnoremap <localleader>v :split<cr><C-w>j

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader>kk :vertical resize+
nnoremap <leader>ll :resize+

nnoremap <leader>a '<S-a>
nnoremap <leader>s '<S-s>
nnoremap <leader>d '<S-d>
nnoremap <leader>f '<S-f>

augroup ALL
  autocmd!
  autocmd InsertEnter * set nornu
  autocmd InsertLeave * set rnu
  autocmd BufWrite * call BufPreWrite()
  autocmd BufEnter * call GetLine()
augroup END

augroup FILETYPES
  autocmd!
  autocmd FileType vim setlocal ts=2 sw=2
  autocmd FileType python setlocal fdc=3 fdm=indent
  autocmd FileType c,rust setlocal fdm=indent noai nosi noci cin cino=ln,c2
  autocmd Filetype text setlocal
        \ ts=8 sw=8 sts=4 tw=80 noet wrap noai nosi noci cc=80
  autocmd FileType json syntax match Comment +\/\/.\+$+
augroup END

augroup RUNCODE
  autocmd!
  " autocmd BufWinEnter *.py <F5> :write<CR>:!python3 %<CR>
  autocmd BufWinEnter *.c nnoremap <buffer> <leader>mm :!make main<CR>
  " autocmd BufWinEnter *.c <F5> :write<cr>:!./main
augroup END

augroup ABBREV
  autocmd!
  autocmd BufEnter * iabbrev ifos itsf4llofstars
  autocmd BufEnter * iabbrev memail irooted4hal@mailfence.com
  autocmd BufEnter * iabbrev slef self
  autocmd BufEnter * iabbrev sefl self
  autocmd BufEnter * iabbrev sfel self
  autocmd BufEnter * iabbrev pirnt print
  autocmd BufEnter * iabbrev prnit print
  autocmd BufEnter * iabbrev pritn print
  autocmd BufEnter * iabbrev prtn print
  autocmd BufEnter * iabbrev prnt print
  autocmd BufEnter * iabbrev retrun return
augroup END
