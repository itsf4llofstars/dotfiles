": VIMRC
": Change: Tue Aug 22 09:34:37 PM CDT 2023

": FUNCTION {{{
fun WriteDate()
  :normal! mpHmoggj
  :r!date
  :normal! kdd
  :execute "normal I\": Change:\<Space>\<Esc>"
  :normal! 'ozt`p
endf

function GetLine()
  if line("'\"") > 1 && line("'\"") <= line("$") | exec "normal g'\"" | endif
endfunction

function Indent()
  let l:view = winsaveview()
  :normal! gg=G
  call winrestview(l:view)
endfunction

function DeleteWs() abort
  normal mz
  %s/\v\s+$//ge
  normal `z
endfunc

function Emmet()
  if &filetype=='html' || &filetype == 'css'
    let g:user_emmet_leader_key=','
    let g:user_emmet_mode='inv'
  endif
endfunction
": }}}

": SETTINGS {{{
filetype  plugin on
filetype indent on
syntax on
set backspace=indent,eol,start
set background=dark
set encoding=utf-8 " COC
set t_Co=256
set termguicolors

set tabstop=4
set shiftwidth=4
set textwidth=0
set expandtab
set nowrap
set number
set relativenumber

set autoindent
set smartindent
set copyindent
set autoread
set hidden
set colorcolumn=80
set cursorline
set cursorlineopt=number
set ignorecase
set smartcase
set incsearch
" set hlsearch
set foldlevel=4
set foldlevelstart=4
set signcolumn=yes " COC
set ruler
set laststatus=2
set statusline=(%n)\ %<%f\ %h%m%r\ %Y%=%-14.(%c%V\ :\ %l%)\ %p%%\ \ %F\ \ |
set showcmd
set showmatch
set scrolloff=5
set path+=**
set timeoutlen=500
set completeopt=menuone,preview,popup
set wildmenu
set wildmode=list:longest,full
set undodir=~/.vim/undodir
set directory=~/.vim/backup
set backupdir=~/.vim/backup
set undofile
set nobackup " COC
set writebackup " COC
set noswapfile
set updatetime=500 " COC

let mapleader=" "
let maplocalleader="\\"
": }}}

": PLUGINS {{{

" PRE-ALE " {{{
let g:ale_enabled = 0
let g:ale_cursor_detail = 0 " 1 Gives the popup
let g:ale_echo_cursor = 1 " Status line message
let g:ale_echo_msg_error_str = 'ERR' " Used with severity in msg_format
let g:ale_echo_msg_info_str = 'INF' " Used with severity in msg_format
let g:ale_echo_msg_warning_str = 'WARN' " Used with severity in msg_format
let g:ale_echo_msg_log = 'LOG' " Used with severity in msg_format
let g:ale_echo_msg_format = '%type% [%code%] %s'
let g:ale_exclude_highlights = ['line too long']
let g:ale_fix_on_save = 1
let g:ale_floating_preview = 1
let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']
let g:ale_hover_cursor = 1
let g:ale_hover_to_preview = 0 " dft=0 Can't see what this does
let g:ale_hover_to_floating_preview = 0 " dft=0 Can't see what this does
let g:ale_linters_explicit = 1
let g:ale_lsp_suggestions = 0 " dft=0 May want to try this on/off
let g:ale_max_signs = 10 " dft=-1 :0 is all off, does not seem to work
let g:ale_popup_menu_enabled = 1
let g:ale_set_signs = 1
let g:ale_set_highlights = 1
let g:ale_exclude_hightlights = [
      \ 'docstring',
      \ 'unused argument',
      \ 'import-error',
      \ 'inconsistent-return-statements'
      \ ]
let g:ale_sign_column_always = 1
let g:ale_sign_error = 'E' " dft='>>'
let g:ale_sign_warning = 'W' " dft='--'
let g:ale_sign_highlight_linenrs = 1 " dft=0 Just to see if this does anything
let g:ale_virtualtext_cursor = 1 " dft='all', 'all:1', 'current:2' 'disabled:0'
let g:ale_virtualtext_prefix = '%comment% %type%:'
let g:ale_detail_to_floating_preview = 1
let g:ale_sign_column_always = 1
" END PRE-ALE " }}}

call plug#begin()
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'easymotion/vim-easymotion'
Plug 'sheerun/vim-polyglot'
Plug 'Yggdroot/indentLine'
Plug 'tpope/vim-fugitive'
Plug 'mattn/emmet-vim'
Plug 'mbbill/undotree'
Plug 'christoomey/vim-tmux-navigator'
Plug 'nanotech/jellybeans.vim'
Plug 'dense-analysis/ale'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'honza/vim-snippets'
" Plug 'SirVer/ultisnips'
call plug#end()

" POST-ALE " {{{
": 'rust': ['analyzer', 'rustc', 'cargo'],
": 'python': ['pylint', 'isort', 'mypy', 'pyright', 'ruff'],
let g:ale_linters = {
      \ 'python': ['pylint'],
      \ 'rust': ['analyzer'],
      \ 'vim': ['vimls'],
      \ 'cpp': ['clangd', 'cpplint'],
      \ 'c': ['clangd', 'cpplint'],
      \ 'json': ['eslint'],
      \ }
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'python': ['autopep8', 'isort'],
      \ 'rust': ['rustfmt'],
      \ 'cpp': ['clang-format'],
      \ 'c': ['clang-format'],
      \ 'json': ['prettier'],
      \}

let g:ale_python_pylint_options = '--rcfile ~/python/pylint.conf'
" END POST-ALE " }}}

": COC " {{{
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(2) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <c-@> coc#refresh()

nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')
nmap <leader>rn <Plug>(coc-rename)
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
vmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
" END COC " }}}

colorscheme catppuccin_mocha
" colorscheme retrobox

nmap <leader><tab> <plug>(fzf-maps-n)
imap <C-x><C-f> <plug>(fzf-complete-word)
imap <C-x><C-d> <plug>(fzf-complete-path)
imap <C-x><C-a> <plug>(fzf-complete-line)
nnoremap <leader>fz :FZF<cr>
nnoremap <leader>fh :FZF ~<CR>

if &filetype == 'python'
  echom 'Filetyp' &filetype
  nnoremap <leader>mf <Plug>(easymotion-bd-f)
  nnoremap <leader>mf <Plug>(easymotion-overwin-f)
  nnoremap <leader>ms <Plug>(easymotion-bd-s)
  nnoremap <leader>ms <Plug>(easymotion-overwin-f2)
  nnoremap <leader>ml <plug>(easymotion-bd-jk)
  nnoremap <leader>ml <Plug>(easymotion-overwin-line)
  nnoremap <leader>mw <Plug>(easymotion-bd-w)
  nnoremap <leader>mw <Plug>(easymotion-overwin-w)
endif

let g:tmux_navigtor_save_on_switch = 1
" let g:indentLine_char = '▏'
let g:indentLine_char_list = ['▏', '▏', '┊']
let g:indentLine_setColors = 0
let g:indentLine_defaultGroup = 'SpecialKey'
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2
" let g:indentLine_setConceal = 0
let g:vim_json_conceal = 0
let g:markdown_syntax_conceal = 0
let g:netrw_banner=0
let g:netrw_altv=1
let g:netrw_liststyle=3
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\s\+'

let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<S-tab>'
" let g:UltiSnipsEditSplit="vertical"
": }}}

": MAPPINGS {{{
inoremap kj <ESC>
vnoremap kj <ESC>

nnoremap <leader>f :find<space>
nnoremap <leader>ut :UndotreeToggle<cr>
nnoremap <leader>ga :Git add .<CR>
nnoremap <leader>gc :Git commit<CR>
nnoremap <leader>gg :write<CR>:Git add .<CR>:Git commit<CR>

nnoremap <leader>w :write<CR>
nnoremap <localleader>w :wall<CR>
nnoremap <leader>q :quit!<CR>
nnoremap <leader>z :write<CR>:quit<CR>
nnoremap <leader>o :edit .<CR>
nnoremap <localleader>e :edit $MYVIMRC<CR>
nnoremap <localleader>ve :vsplit<cr><C-w>l:edit $MYVIMRC<cr>
nnoremap <leader>t :shell<cr>
nnoremap <localleader>t :terminal<cr>

command! MakeTags !ctags -R .
nnoremap cw bce
nnoremap <cr> :nohls<cr><C-g>
nnoremap <C-f> Lzt
nnoremap <leader>nb :bnext<cr>
nnoremap <leader>pb :bprevious<cr>
nnoremap <S-b> _
nnoremap <S-e> $
nnoremap <S-y> y$
nnoremap <F8> @
nnoremap <F9> @@
nnoremap <leader>a zt
nnoremap <leader>bn :bnext<Cr>
nnoremap <leader>bp :bprev<cr>
nnoremap w W
nnoremap n nzz
nnoremap N Nzz
nnoremap ' `
nnoremap '' ``
vnoremap J :m '>+1<cr>gv=gv
vnoremap K :m '<-2<cr>gv=gv
vnoremap < <gv
vnoremap > >gv
nnoremap <leader>* :%s/\<<C-r><C-w>\>//gI<left><left><left>
nnoremap <leader>& :%s/\<<C-r><C-w>\>//gIc<left><left><left><left>

nnoremap <silent> <leader>to :tabnew<cr>
nnoremap <silent> <leader>tn :tabnext<cr>
nnoremap <silent> <leader>tp :tabprevious<cr>
nnoremap <silent> <leader>tc :tabclose<cr>

nnoremap <leader>v :vsplit<cr><C-w>l
nnoremap <leader>s :split<cr><C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader>kk :vertical resize+5<cr>
nnoremap <leader>ll :resize+5<cr>

tnoremap <C-h> <C-w>h
tnoremap <C-j> <C-w>j
tnoremap <C-k> <C-w>k
tnoremap <C-l> <C-w>l
": }}}

": GROUPS {{{
augroup ALL " {{{
  au!
  au BufReadPost * call GetLine()
  au VimEnter,BufWritePre * call DeleteWs()
  au InsertEnter * silent set nornu
  au InsertLeave * silent set rnu
augroup END " }}}

augroup VIM " {{{
  au!
  au FileType vim silent setlocal ts=2 sw=2 sts=2 tw=0 cc=100 fdc=4 fdm=marker
  au BufWinEnter,BufWritePre $MYVIMRC,*.vim call Indent()
  au BufEnter $MYVIMRC,*.vim nnoremap <buffer> <localleader>s mp:source $MYVIMRC<cr>
        \ :do FileType<cr>:do BufEnter<cr>`p
  au BufEnter $MYVIMRC,*.vim :IndentLinesDisable
  au BufWritepre $MYVIMRC call WriteDate()
augroup END " }}}

augroup PYTHON " {{{
  au!
  au FileType python silent setlocal fdm=indent fdc=0 cc=90 tm=5000
  au BufEnter *.py nnoremap <buffer> <F6> :!tt<CR>:write<cr>:!python3 %<cr>
  au BufWinEnter *.py nnoremap <buffer> <F5> :write<CR>:!python3 %<CR>
  au BufWritePre *.py call Indent()
  au BufEnter *.py let @n=":vsplitl: edit ~/notes/py_snips.txt: vertical resize-45h"
  au BufEnter *.py nnoremap <buffer> <localleader>a '<S-a>
  au BufEnter *.py nnoremap <buffer> <localleader>s '<S-s>
  au BufEnter *.py nnoremap <buffer> <localleader>d '<S-d>
  au BufEnter *.py nnoremap <buffer> <localleader>f '<S-f>
augroup END " }}}

augroup BASH
  au!
  au FileType sh silent setlocal ts=2 sw=2 sts=2 tw=0 et nowrap nofen fdc=0 cc=80
  au BufEnter *.sh nnoremap <F5> :write<CR>:!./%<CR>
augroup END

augroup C " {{{
  au!
  au FileType c silent setlocal ts=4 sts=4 sw=4 fdm=indent cc=80 noai nosi noci cin cino=ln,c2
  au BufEnter *.c nnoremap <buffer> <leader>mm :!make main<cr>
  au BufEnter *.c nnoremap <buffer> <F5> :!./main<cr>
  au BufEnter *.c,*.h nnoremap <buffer> <leader>b o{<cr>}<esc>ko
  au BufWritePre *.c,*.h call Indent()
augroup END " }}}

augroup ARDUINO " {{{
  au!
  au FileType arduino silent setlocal ts=2 sw=2 cc=80 fdm=indent noai nosi noci cin cino=ln,c2
  au BufEnter *.ino nnoremap <buffer> <leader>b o{<cr>}<esc>ko
  au BufWinEnter,BufWritePre *.ino call Indent()
augroup END " }}}

augroup CPP " {{{
  au!
  au FileType cpp silent setlocal ts=4 sw=4 fdm=indent cc=80 noai nosi noci cin cino=ln,c2
  au BufEnter *.cpp nnoremap <buffer> <leader>mm :!make main<cr>
  au BufEnter *.cpp nnoremap <buffer> <F5> :!./main<cr>
  au BufEnter *.cpp,*.h nnoremap <buffer> <leader>b o{<cr>}<esc>ko
  au BufWritePre *.cpp,*.h call Indent()
augroup END " }}}

augroup RUST " {{{
  au!
  au FileType rust setlocal ts=4 sw=4 fdm=indent cc=80 noai nosi noci cin
  au BufEnter *.rs nnoremap <buffer> <leader>mm :!clear && cargo check<cr>
  au BufEnter *.rs nnoremap <buffer> <F5> :!clear && cargo run<cr>
  au BufEnter *.rs nnoremap <buffer> <leader>b A<space>{<cr>}<esc>ko
  au BufWritePre *.rs call Indent()
augroup END " }}}

augroup HTML_CSS " {{{
  au!
  au FileType html setlocal ts=2 sw=2 tw=160 cc=80,100,120 fdc=4 fdm=manual aw updatetime=1000
  au FileType html,css nnoremap <buffer> <localleader>f Vatzf
  au BufRead,BufEnter *.html
        \ nnoremap <buffer> <localleader>c i<!------><esc>3hi<space><esc>i<space>
  au BufRead,BufEnter *.css nnoremap <buffer> <localleader>c i/**/<esc>hi<space><esc>i<space>
  au BufEnter *.html,*.css nnoremap <buffer> <leader>d :!ud u<cr><cr>
  au BufWinEnter,BufWritePre *.html,*.css call Indent()
  au BufWinEnter *.html,*.css call Emmet()
  au CursorHold *.html,*.css write
augroup END " }}}

augroup MARKDOWN " {{{
  au!
  au Filetype markdown silent setlocal ts=4 sw=2 sts=4 tw=0 et nowrap cc=80,100
  au BufEnter *.md colorscheme catppuccin_mocha
  au BufLeave *.md colorscheme retrobox
  au BufEnter *.md nnoremap <buffer> <localleader>x :set filetype=text<CR>
  au BufEnter *.md nnoremap <buffer> <localleader>b :set filetype=markdown<CR>
augroup END " }}}

augroup TEXT " {{{
  au!
  au Filetype text silent setlocal ts=4 sw=2 sts=4 tw=80 noet nowrap ai nosi noci cc=80
  au BufEnter *.txt :IndentLinesDisable
augroup END " }}}

augroup JSON " {{{
  au!
  au FileType json syntax match Comment +\/\/.\+$+
augroup END " }}}

augroup JAVASCRIPT " {{{
  au!
  au FileType javascript silent setlocal ts=2 sw=2 fdm=indent
  au BufEnter,BufWritePre *.js call Indent()
augroup END " }}}

augroup SNIPPETS " {{{
  au!
  au BufEnter *.txt,*.py nnoremap <buffer> ,hash :-1read $HOME/.vim/snippets/.python.py<CR>gg010jw
  au BufEnter *.txt,*.py nnoremap <buffer> ,cls
        \ :-1read $HOME/.vim/snippets/.class.py<CR>0w:%s/\<<C-r><C-w>\>//gI<left><left><left>
  au BufEnter *.txt,*.py nnoremap <buffer> ,def
        \ :-1read $HOME/.vim/snippets/.def.py<CR>0w:%s/\<<C-r><C-w>\>//gI<left><left><left>
augroup END " }}}

augroup ABBREV " {{{
  au!
  au BufEnter * iabbrev <buffer> ifos itsf5llofstars
  au BufEnter * iabbrev <buffer> memail irooted5hal@mailfence.com
  au BufEnter * iabbrev <buffer> pirnt print
  au BufEnter * iabbrev <buffer> prnit print
  au BufEnter * iabbrev <buffer> pritn print
  au BufEnter * iabbrev <buffer> prtn print
  au BufEnter * iabbrev <buffer> prnt print
  au BufEnter * iabbrev <buffer> slef self
  au BufEnter * iabbrev <buffer> sefl self
  au BufEnter * iabbrev <buffer> sfel self
  au BufEnter * iabbrev <buffer> sfle self
  au BufEnter * iabbrev <buffer> ptah path
  au BufEnter * iabbrev <buffer> paht path
  au BufEnter * iabbrev <buffer> phat path
  au BufEnter * iabbrev <buffer> phta path
  au BufEnter * iabbrev <buffer> tow two
  au BufEnter * iabbrev <buffer> retrun return
  au BufEnter * iabbrev <buffer> Retrun Return
augroup END " }}}

" augroup TEST " {{{
"   autocmd!
"   autocmd Syntax text echom 'Syntax'
"   autocmd FileType text echom 'FileType'
"   autocmd BufReadPost *.txt echom 'BufReadPost'
"   autocmd VimEnter *.txt echom 'VimEnter'
"   autocmd BufEnter *.txt echom 'BufEnter'
" augroup END " }}}

augroup OPERATOR " {{{
  au!
  au BufRead,BufEnter * :onoremap <buffer> it :<c-u>normal! f<vi<<cr>
  au BufRead,BufEnter * :onoremap <buffer> ir :<c-u>normal! f{vi{<cr>
  au BufRead,BufEnter * :onoremap <buffer> ip :<c-u>normal! f(vi(<cr>
  au BufRead,BufEnter * :onoremap <buffer> ib :<c-u>normal! f[vi[<cr>
augroup END " }}}
": }}}
